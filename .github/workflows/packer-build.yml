name: Build Packer AMI and GCP Machine Image with Deployment

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_images:
    name: Build and Share AMI/Machine Images
    runs-on: ubuntu-latest
    if: github.repository_owner == 'CSYE6225-Network-Cloud'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: npm ci

      - name: Install pkg Globally
        run: npm install -g pkg

      - name: Build Application with pkg
        run: |
          set -e  # Stop if any command fails
          pkg server.js --output infra/packer/dist/webapp --targets node18-linux-x64
          chmod +x infra/packer/dist/webapp
          echo "Build complete! Binary located at infra/packer/dist/webapp"

      - name: Debug Build Output
        run: ls -lah infra/packer/dist/

      # AWS DEV Configuration
      - name: Configure AWS DEV Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Setup GCP DEV credentials from JSON
      - name: Setup GCP DEV Credentials
        id: setup-gcp-dev
        run: |
          echo '${{ secrets.GCP_DEV_CREDENTIALS }}' > gcp-dev-credentials.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/gcp-dev-credentials.json" >> $GITHUB_ENV
          echo "GCP_PROJECT_ID=$(echo '${{ secrets.GCP_DEV_CREDENTIALS }}' | jq -r '.project_id')" >> $GITHUB_ENV

      # Setup GCP DEMO credentials for sharing
      - name: Setup GCP DEMO Project Info
        id: setup-gcp-demo
        run: |
          echo '${{ secrets.GCP_DEMO_CREDENTIALS }}' > gcp-demo-credentials.json
          echo "GCP_DEMO_PROJECT_ID=$(echo '${{ secrets.GCP_DEMO_CREDENTIALS }}' | jq -r '.project_id')" >> $GITHUB_ENV
          echo "GCP_DEMO_SERVICE_ACCOUNT=$(echo '${{ secrets.GCP_DEMO_CREDENTIALS }}' | jq -r '.client_email')" >> $GITHUB_ENV

      # Debug variables
      - name: Debug environment variables
        run: |
          echo "GCP_PROJECT_ID: ${GCP_PROJECT_ID}"
          echo "GCP_DEMO_PROJECT_ID: ${GCP_DEMO_PROJECT_ID}"
          echo "GCP_DEMO_SERVICE_ACCOUNT: ${GCP_DEMO_SERVICE_ACCOUNT}"

      # Setup AWS DEMO Account ID for sharing
      - name: Configure AWS DEMO Account
        id: setup-aws-demo
        run: |
          # Temporarily use DEMO credentials to get account ID
          export AWS_ACCESS_KEY_ID=${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          
          # Get account ID and set as environment variable
          DEMO_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "DEMO_ACCOUNT_ID=${DEMO_ACCOUNT_ID}" >> $GITHUB_ENV
          echo "DEMO_ACCOUNT_ID: ${DEMO_ACCOUNT_ID}"
          
          # Switch back to DEV credentials for building
          unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY

      # Install and authenticate gcloud CLI with DEV credentials
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_DEV_CREDENTIALS }}
          export_default_credentials: true

      - name: Authenticate User for GCP
        id: authenticate-gcp-user
        run: |
          # Extract client_email from the JSON credentials
          GCP_DEV_EMAIL=$(echo '${{ secrets.GCP_DEV_CREDENTIALS }}' | jq -r '.client_email')

          # Authenticate the service account
          gcloud auth activate-service-account --key-file="gcp-dev-credentials.json"

          # Set the active account
          gcloud config set account ${GCP_DEV_EMAIL}

          # Export the email to the environment for later use
          echo "GCP_DEV_EMAIL=${GCP_DEV_EMAIL}" >> $GITHUB_ENV

      - name: Install Packer
        uses: hashicorp/setup-packer@v2
        with:
          version: latest

      - name: Initialize Packer
        working-directory: infra/packer
        run: packer init .

      - name: Build AMI and Machine Images
        working-directory: infra/packer
        run: |
          packer build \
            -var "demo_account_id=${DEMO_ACCOUNT_ID}" \
            -var "gcp_project_id=${GCP_PROJECT_ID}" \
            -var "gcp_demo_project_id=${GCP_DEMO_PROJECT_ID}" \
            packer-machine-image.pkr.hcl

      - name: Verify AWS AMI Creation
        run: |
          echo "Verifying AWS AMI creation..."
          aws ec2 describe-images --owners self --query 'Images[*].[ImageId,Name,CreationDate]' --output table --filters "Name=name,Values=csye6225-nodejs-mysql-*" | head -n 10
      #
      - name: Verify GCP Machine Image Creation
        run: |
          echo "Verifying GCP Machine Image creation..."
          gcloud compute images list --project=${GCP_PROJECT_ID} --filter="name:csye6225-nodejs-mysql" --limit=5

      # Run the GCP migration script after GCP Machine Image is verified
      - name: Migrate GCP Machine Image to DEMO Project
        run: |
          echo "Running GCP migration script..."
          
          # Make the script executable
          chmod +x infra/packer/gcp_migration.sh
          
          # Run the script with zone parameter
          ./infra/packer/gcp_migration.sh us-east1-b
          
          # Verify the machine image in the DEMO project
          echo "Verifying Machine Image in DEMO project..."
          
          # Temporarily authenticate with DEMO credentials to verify
          gcloud auth activate-service-account --key-file="gcp-demo-credentials.json"
          gcloud config set project ${GCP_DEMO_PROJECT_ID}
          
          gcloud compute images list --project=${GCP_DEMO_PROJECT_ID} --filter="name:copy-csye6225-nodejs-mysql" --limit=5
          gcloud compute machine-images list --project=${GCP_DEMO_PROJECT_ID} --filter="name:mi-demo-csye6225-nodejs-mysql" --limit=5

      # Run the AMI migration script after AWS AMI is verified
      - name: Migrate AMI to DEMO Account
        run: |
          echo "Running AMI migration script..."
          
          # Create environment variables for the script
          export DEV_AWS_ACCESS_KEY_ID="${{ secrets.DEV_AWS_ACCESS_KEY_ID }}"
          export DEV_AWS_SECRET_ACCESS_KEY="${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}"
          export DEMO_AWS_ACCESS_KEY_ID="${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}"
          export DEMO_AWS_SECRET_ACCESS_KEY="${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}"
          
          # Make the script executable
          chmod +x infra/packer/ami_migration.sh
          
          # Run the script
          ./infra/packer/ami_migration.sh
          
          # Verify the AMI in the DEMO account
          echo "Verifying AMI copy in DEMO account..."
          
          # Temporarily use DEMO credentials to verify
          export AWS_ACCESS_KEY_ID=${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          
          aws ec2 describe-images --owners self --query 'Images[*].[ImageId,Name,CreationDate]' --output table | head -n 10
          
          # Store AMI ID for later
          LATEST_AMI_ID=$(aws ec2 describe-images --owners self --filters "Name=name,Values=Copied-csye6225-nodejs-mysql-*" --query 'sort_by(Images, &CreationDate)[-1].ImageId' --output text)
          echo "LATEST_AMI_ID=${LATEST_AMI_ID}" >> $GITHUB_ENV
          echo "Latest AMI ID: ${LATEST_AMI_ID}"

  deploy_ami:
    name: Deploy AMI to Auto Scaling Group
    needs: build_images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS DEMO Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Get Latest AMI ID
        id: get-ami
        run: |
          # Get latest AMI with the naming pattern
          LATEST_AMI=$(aws ec2 describe-images \
            --owners self \
            --filters "Name=name,Values=Copied-csye6225-nodejs-mysql-*" \
            --query 'sort_by(Images, &CreationDate)[-1]' \
            --output json)
          
          # Extract AMI ID and creation date
          AMI_ID=$(echo $LATEST_AMI | jq -r '.ImageId')
          CREATION_DATE=$(echo $LATEST_AMI | jq -r '.CreationDate')
          
          if [ -z "$AMI_ID" ] || [ "$AMI_ID" == "null" ]; then
            echo "No AMI found. Exiting."
            exit 1
          fi
          
          echo "Latest AMI ID: $AMI_ID (created: $CREATION_DATE)"
          echo "ami_id=$AMI_ID" >> $GITHUB_OUTPUT

      - name: Get Launch Template
        id: get-launch-template
        run: |
          # You can filter by tag or just list all and pick the first one
          # Adjust the filter as needed for your specific Launch Template
          LAUNCH_TEMPLATES=$(aws ec2 describe-launch-templates \
            --query 'LaunchTemplates[*].[LaunchTemplateId,LaunchTemplateName,DefaultVersionNumber,LatestVersionNumber]' \
            --output json)
          
          echo "Available Launch Templates:"
          echo "$LAUNCH_TEMPLATES" | jq -r '.[] | "ID: \(.[0]), Name: \(.[1]), Default Version: \(.[2]), Latest Version: \(.[3])"'
          
          # Pick the first Launch Template (you may want to add better filtering here)
          TEMPLATE_ID=$(echo "$LAUNCH_TEMPLATES" | jq -r '.[0][0]')
          TEMPLATE_NAME=$(echo "$LAUNCH_TEMPLATES" | jq -r '.[0][1]')
          LATEST_VERSION=$(echo "$LAUNCH_TEMPLATES" | jq -r '.[0][3]')
          
          if [ -z "$TEMPLATE_ID" ] || [ "$TEMPLATE_ID" == "null" ]; then
            echo "No Launch Template found. Exiting."
            exit 1
          fi
          
          echo "Using Launch Template: $TEMPLATE_NAME (ID: $TEMPLATE_ID), Latest Version: $LATEST_VERSION"
          echo "template_id=$TEMPLATE_ID" >> $GITHUB_OUTPUT
          echo "template_name=$TEMPLATE_NAME" >> $GITHUB_OUTPUT
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT

      - name: Create new Launch Template version
        id: create-lt-version
        run: |
          TEMPLATE_ID="${{ steps.get-launch-template.outputs.template_id }}"
          TEMPLATE_NAME="${{ steps.get-launch-template.outputs.template_name }}"
          LATEST_VERSION="${{ steps.get-launch-template.outputs.latest_version }}"
          AMI_ID="${{ steps.get-ami.outputs.ami_id }}"
          
          echo "Getting current template version details..."
          CURRENT_TEMPLATE=$(aws ec2 describe-launch-template-versions \
            --launch-template-id $TEMPLATE_ID \
            --versions $LATEST_VERSION \
            --query 'LaunchTemplateVersions[0].LaunchTemplateData' \
            --output json)
          
          echo "Current template uses AMI: $(echo $CURRENT_TEMPLATE | jq -r '.ImageId')"
          
          # Create a temporary JSON file with the updated template
          echo "Creating updated template with new AMI ID: $AMI_ID"
          NEW_TEMPLATE=$(echo $CURRENT_TEMPLATE | jq --arg ami "$AMI_ID" '.ImageId = $ami')
          echo "$NEW_TEMPLATE" > new_template.json
          
          # Create the new version
          NEW_VERSION_RESULT=$(aws ec2 create-launch-template-version \
            --launch-template-id $TEMPLATE_ID \
            --version-description "Automated update with AMI $AMI_ID" \
            --launch-template-data file://new_template.json \
            --output json)
          
          NEW_VERSION=$(echo $NEW_VERSION_RESULT | jq -r '.LaunchTemplateVersion.VersionNumber')
          echo "Created new Launch Template version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Clean up
          rm -f new_template.json

      - name: Get Auto Scaling Group
        id: get-asg
        run: |
          # Find the Auto Scaling Group using this Launch Template
          ASGS=$(aws autoscaling describe-auto-scaling-groups \
            --query "AutoScalingGroups[?LaunchTemplate.LaunchTemplateId=='${{ steps.get-launch-template.outputs.template_id }}']" \
            --output json)
          
          # Get the first ASG (adjust if you have multiple)
          ASG_NAME=$(echo $ASGS | jq -r '.[0].AutoScalingGroupName')
          
          if [ -z "$ASG_NAME" ] || [ "$ASG_NAME" == "null" ]; then
            echo "No Auto Scaling Group found using this Launch Template. Exiting."
            exit 1
          fi
          
          echo "Found Auto Scaling Group: $ASG_NAME"
          echo "asg_name=$ASG_NAME" >> $GITHUB_OUTPUT

      - name: Update Auto Scaling Group
        run: |
          ASG_NAME="${{ steps.get-asg.outputs.asg_name }}"
          TEMPLATE_ID="${{ steps.get-launch-template.outputs.template_id }}"
          NEW_VERSION="${{ steps.create-lt-version.outputs.new_version }}"
          
          echo "Updating Auto Scaling Group to use new Launch Template version..."
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name $ASG_NAME \
            --launch-template LaunchTemplateId=$TEMPLATE_ID,Version=$NEW_VERSION
          
          echo "Updated Auto Scaling Group to use Launch Template version $NEW_VERSION"

      - name: Start Instance Refresh
        id: refresh
        run: |
          ASG_NAME="${{ steps.get-asg.outputs.asg_name }}"
          
          echo "Starting instance refresh for Auto Scaling Group: $ASG_NAME"
          REFRESH_RESULT=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $ASG_NAME \
            --preferences '{"MinHealthyPercentage": 90, "InstanceWarmup": 300}' \
            --output json)
          
          REFRESH_ID=$(echo $REFRESH_RESULT | jq -r '.InstanceRefreshId')
          echo "Started instance refresh with ID: $REFRESH_ID"
          echo "refresh_id=$REFRESH_ID" >> $GITHUB_OUTPUT

      - name: Wait for Instance Refresh to complete
        run: |
          ASG_NAME="${{ steps.get-asg.outputs.asg_name }}"
          REFRESH_ID="${{ steps.refresh.outputs.refresh_id }}"
          
          echo "Waiting for instance refresh to complete (this may take several minutes)..."
          
          # Initial delay to let the refresh start
          sleep 30
          
          STATUS="Pending"
          while [ "$STATUS" == "Pending" ] || [ "$STATUS" == "InProgress" ]; do
            REFRESH=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name $ASG_NAME \
              --instance-refresh-ids $REFRESH_ID \
              --query 'InstanceRefreshes[0]' \
              --output json)
          
            STATUS=$(echo $REFRESH | jq -r '.Status')
            PROGRESS=$(echo $REFRESH | jq -r '.PercentageComplete')
          
            echo "$(date '+%Y-%m-%d %H:%M:%S') - Refresh status: $STATUS ($PROGRESS% complete)"
          
            if [ "$STATUS" != "Pending" ] && [ "$STATUS" != "InProgress" ]; then
              break
            fi
          
            # Wait 30 seconds before checking again
            sleep 30
          done
          
          # Final check
          if [ "$STATUS" == "Successful" ]; then
            echo "✅ Instance refresh completed successfully!"
          else
            REASON=$(echo $REFRESH | jq -r '.StatusReason')
            echo "❌ Instance refresh failed with status: $STATUS"
            echo "Reason: $REASON"
            exit 1
          fi

      # Clean up credentials after build
      - name: Clean Up Credentials
        if: always()
        run: |
          rm -f gcp-dev-credentials.json gcp-demo-credentials.json